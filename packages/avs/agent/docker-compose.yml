services:
  build:
    image: alpine
    volumes:
      - .:/workspace
      - ./out:/out
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /workspace
    command: >
      sh -c "
        if ! command -v docker &> /dev/null; then
          apk add --no-cache docker-cli
        fi &&
        apk add --no-cache docker-cli-buildx &&
        docker buildx inspect builder >/dev/null 2>&1 || docker buildx create --name builder &&
        docker buildx use builder &&
        docker buildx build --load -t ${IMAGE_NAME}:latest . &&
        docker save -o /out/${IMAGE_NAME}.tar ${IMAGE_NAME}:latest &&
        echo 'Image saved to out/${IMAGE_NAME}.tar'
      "

  push:
    image: alpine
    volumes:
      - .:/workspace
      - ./out:/out
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /workspace
    env_file:
      - .env
    command: >
      sh -c "
        if ! command -v docker &> /dev/null; then
          apk add --no-cache docker-cli
        fi &&
        apk add --no-cache docker-cli-buildx curl jq &&
        docker buildx inspect builder >/dev/null 2>&1 || docker buildx create --name builder &&
        echo "${DOCKER_PASSWORD}" | docker login --username ${DOCKER_USERNAME} --password-stdin &&
        docker buildx use builder &&
        docker buildx build --no-cache --platform linux/amd64,linux/arm64 --push -t ${DOCKER_USERNAME}/${IMAGE_NAME}:latest . &&
        echo 'Image pushed to Docker Hub' &&
        echo 'Making repository public...' &&
        if [ -n \"${DOCKER_ACCESS_TOKEN:-}\" ]; then
          TOKEN=${DOCKER_ACCESS_TOKEN}
        else
          TOKEN=$(curl -s -H 'Content-Type: application/json' -X POST -d '{\"username\": \"'${DOCKER_USERNAME}'\", \"password\": \"'${DOCKER_PASSWORD}'\"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
        fi &&
        if [ \"${TOKEN}\" != \"null\" ] && [ -n \"${TOKEN}\" ]; then
          RESPONSE=$(curl -s -H \"Authorization: JWT ${TOKEN}\" -H 'Content-Type: application/json' -X PATCH -d '{\"is_private\": false}' https://hub.docker.com/v2/repositories/${DOCKER_USERNAME}/${IMAGE_NAME}/) &&
          if echo \"${RESPONSE}\" | grep -q '\"is_private\":false'; then
            echo 'Repository made public successfully'
          else
            echo 'Failed to make repository public. Response:' ${RESPONSE}
            echo 'Please manually set the repository to public in Docker Hub web interface'
          fi
        else
          echo 'Failed to authenticate with Docker Hub API'
          echo 'Please manually set the repository to public in Docker Hub web interface'
        fi
      "

  run:
    image: alpine
    volumes:
      - ./out:/out
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "4000:4000"
    env_file:
      - .env
    command: >
      sh -c "
        if ! command -v docker &> /dev/null; then
          apk add --no-cache docker-cli
        fi &&
        echo "${DOCKER_PASSWORD}" | docker login --username ${DOCKER_USERNAME} --password-stdin &&
        docker load < /out/${IMAGE_NAME}.tar.gz &&
        docker run --rm -p 6000:6000 ${IMAGE_NAME}:latest npm run start
      "
