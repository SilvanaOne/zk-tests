use num_bigint::BigInt;

// Helper function to parse BigInt from string without using std::str::FromStr
fn parse_bigint(buf: &[u8]) -> BigInt {
    BigInt::parse_bytes(buf, 10).unwrap()
}

#[derive(Clone)]
pub struct PoseidonConfig {
    pub mds: Vec<Vec<BigInt>>,
    pub round_constants: Vec<Vec<BigInt>>,
    pub full_rounds: usize,
    pub has_initial_round_constant: bool,
    pub state_size: usize,
    pub rate: usize,
    pub power: u32,
}

pub struct PoseidonConstant;

impl PoseidonConstant {
    pub fn poseidon_config_kimchi_fp() -> PoseidonConfig {
        PoseidonConfig {
            mds: vec![
                vec![
                    parse_bigint(b"12035446894107573964500871153637039653510326950134440362813193268448863222019"),
                    parse_bigint(b"25461374787957152039031444204194007219326765802730624564074257060397341542093"),
                    parse_bigint(b"27667907157110496066452777015908813333407980290333709698851344970789663080149"),
                ],
                vec![
                    parse_bigint(b"4491931056866994439025447213644536587424785196363427220456343191847333476930"),
                    parse_bigint(b"14743631939509747387607291926699970421064627808101543132147270746750887019919"),
                    parse_bigint(b"9448400033389617131295304336481030167723486090288313334230651810071857784477"),
                ],
                vec![
                    parse_bigint(b"10525578725509990281643336361904863911009900817790387635342941550657754064843"),
                    parse_bigint(b"27437632000253211280915908546961303399777448677029255413769125486614773776695"),
                    parse_bigint(b"27566319851776897085443681456689352477426926500749993803132851225169606086988"),
                ],
            ],
            round_constants: vec![
                vec![
                    parse_bigint(b"21155079691556475130150866428468322463125560312786319980770950159250751855431"),
                    parse_bigint(b"16883442198399350202652499677723930673110172289234921799701652810789093522349"),
                    parse_bigint(b"17030687036425314703519085065002231920937594822150793091243263847382891822670"),
                ],
                vec![
                    parse_bigint(b"25216718237129482752721276445368692059997901880654047883630276346421457427360"),
                    parse_bigint(b"9054264347380455706540423067244764093107767235485930776517975315876127782582"),
                    parse_bigint(b"26439087121446593160953570192891907825526260324480347638727375735543609856888"),
                ],
                vec![
                    parse_bigint(b"15251000790817261169639394496851831733819930596125214313084182526610855787494"),
                    parse_bigint(b"10861916012597714684433535077722887124099023163589869801449218212493070551767"),
                    parse_bigint(b"18597653523270601187312528478986388028263730767495975370566527202946430104139"),
                ],
                vec![
                    parse_bigint(b"15831416454198644276563319006805490049460322229057756462580029181847589006611"),
                    parse_bigint(b"15171856919255965617705854914448645702014039524159471542852132430360867202292"),
                    parse_bigint(b"15488495958879593647482715143904752785889816789652405888927117106448507625751"),
                ],
                vec![
                    parse_bigint(b"19039802679983063488134304670998725949842655199289961967801223969839823940152"),
                    parse_bigint(b"4720101937153217036737330058775388037616286510783561045464678919473230044408"),
                    parse_bigint(b"10226318327254973427513859412126640040910264416718766418164893837597674300190"),
                ],
                vec![
                    parse_bigint(b"20878756131129218406920515859235137275859844638301967889441262030146031838819"),
                    parse_bigint(b"7178475685651744631172532830973371642652029385893667810726019303466125436953"),
                    parse_bigint(b"1996970955918516145107673266490486752153434673064635795711751450164177339618"),
                ],
                vec![
                    parse_bigint(b"15205545916434157464929420145756897321482314798910153575340430817222504672630"),
                    parse_bigint(b"25660296961552699573824264215804279051322332899472350724416657386062327210698"),
                    parse_bigint(b"13842611741937412200312851417353455040950878279339067816479233688850376089318"),
                ],
                vec![
                    parse_bigint(b"1383799642177300432144836486981606294838630135265094078921115713566691160459"),
                    parse_bigint(b"1135532281155277588005319334542025976079676424839948500020664227027300010929"),
                    parse_bigint(b"4384117336930380014868572224801371377488688194169758696438185377724744869360"),
                ],
                vec![
                    parse_bigint(b"21725577575710270071808882335900370909424604447083353471892004026180492193649"),
                    parse_bigint(b"676128913284806802699862508051022306366147359505124346651466289788974059668"),
                    parse_bigint(b"25186611339598418732666781049829183886812651492845008333418424746493100589207"),
                ],
                vec![
                    parse_bigint(b"10402240124664763733060094237696964473609580414190944671778761753887884341073"),
                    parse_bigint(b"11918307118590866200687906627767559273324023585642003803337447146531313172441"),
                    parse_bigint(b"16895677254395661024186292503536662354181715337630376909778003268311296637301"),
                ],
                vec![
                    parse_bigint(b"23818602699032741669874498456696325705498383130221297580399035778119213224810"),
                    parse_bigint(b"4285193711150023248690088154344086684336247475445482883105661485741762600154"),
                    parse_bigint(b"19133204443389422404056150665863951250222934590192266371578950735825153238612"),
                ],
                vec![
                    parse_bigint(b"5515589673266504033533906836494002702866463791762187140099560583198974233395"),
                    parse_bigint(b"11830435563729472715615302060564876527985621376031612798386367965451821182352"),
                    parse_bigint(b"7510711479224915247011074129666445216001563200717943545636462819681638560128"),
                ],
                vec![
                    parse_bigint(b"24694843201907722940091503626731830056550128225297370217610328578733387733444"),
                    parse_bigint(b"27361655066973784653563425664091383058914302579694897188019422193564924110528"),
                    parse_bigint(b"21606788186194534241166833954371013788633495786419718955480491478044413102713"),
                ],
                vec![
                    parse_bigint(b"19934060063390905409309407607814787335159021816537006003398035237707924006757"),
                    parse_bigint(b"8495813630060004961768092461554180468161254914257386012937942498774724649553"),
                    parse_bigint(b"27524960680529762202005330464726908693944660961000958842417927307941561848461"),
                ],
                vec![
                    parse_bigint(b"15178481650950399259757805400615635703086255035073919114667254549690862896985"),
                    parse_bigint(b"16164780354695672259791105197274509251141405713012804937107314962551600380870"),
                    parse_bigint(b"10529167793600778056702353412758954281652843049850979705476598375597148191979"),
                ],
                vec![
                    parse_bigint(b"721141070179074082553302896292167103755384741083338957818644728290501449040"),
                    parse_bigint(b"22044408985956234023934090378372374883099115753118261312473550998188148912041"),
                    parse_bigint(b"27068254103241989852888872162525066148367014691482601147536314217249046186315"),
                ],
                vec![
                    parse_bigint(b"3880429241956357176819112098792744584376727450211873998699580893624868748961"),
                    parse_bigint(b"17387097125522937623262508065966749501583017524609697127088211568136333655623"),
                    parse_bigint(b"6256814421247770895467770393029354017922744712896100913895513234184920631289"),
                ],
                vec![
                    parse_bigint(b"2942627347777337187690939671601251987500285937340386328746818861972711408579"),
                    parse_bigint(b"24031654937764287280548628128490074801809101323243546313826173430897408945397"),
                    parse_bigint(b"14401457902976567713827506689641442844921449636054278900045849050301331732143"),
                ],
                vec![
                    parse_bigint(b"20170632877385406450742199836933900257692624353889848352407590794211839130727"),
                    parse_bigint(b"24056496193857444725324410428861722338174099794084586764867109123681727290181"),
                    parse_bigint(b"11257913009612703357266904349759250619633397075667824800196659858304604714965"),
                ],
                vec![
                    parse_bigint(b"22228158921984425749199071461510152694025757871561406897041788037116931009246"),
                    parse_bigint(b"9152163378317846541430311327336774331416267016980485920222768197583559318682"),
                    parse_bigint(b"13906695403538884432896105059360907560653506400343268230130536740148070289175"),
                ],
                vec![
                    parse_bigint(b"7220714562509721437034241786731185291972496952091254931195414855962344025067"),
                    parse_bigint(b"27608867305903811397208862801981345878179337369367554478205559689592889691927"),
                    parse_bigint(b"13288465747219756218882697408422850918209170830515545272152965967042670763153"),
                ],
                vec![
                    parse_bigint(b"8251343892709140154567051772980662609566359215743613773155065627504813327653"),
                    parse_bigint(b"22035238365102171608166944627493632660244312563934708756134297161332908879090"),
                    parse_bigint(b"13560937766273321037807329177749403409731524715067067740487246745322577571823"),
                ],
                vec![
                    parse_bigint(b"21652518608959234550262559135285358020552897349934571164032339186996805408040"),
                    parse_bigint(b"22479086963324173427634460342145551255011746993910136574926173581069603086891"),
                    parse_bigint(b"13676501958531751140966255121288182631772843001727158043704693838707387130095"),
                ],
                vec![
                    parse_bigint(b"5680310394102577950568930199056707827608275306479994663197187031893244826674"),
                    parse_bigint(b"25125360450906166639190392763071557410047335755341060350879819485506243289998"),
                    parse_bigint(b"22659254028501616785029594492374243581602744364859762239504348429834224676676"),
                ],
                vec![
                    parse_bigint(b"23101411405087512171421838856759448177512679869882987631073569441496722536782"),
                    parse_bigint(b"24149774013240355952057123660656464942409328637280437515964899830988178868108"),
                    parse_bigint(b"5782097512368226173095183217893826020351125522160843964147125728530147423065"),
                ],
                vec![
                    parse_bigint(b"13540762114500083869920564649399977644344247485313990448129838910231204868111"),
                    parse_bigint(b"20421637734328811337527547703833013277831804985438407401987624070721139913982"),
                    parse_bigint(b"7742664118615900772129122541139124149525273579639574972380600206383923500701"),
                ],
                vec![
                    parse_bigint(b"1109643801053963021778418773196543643970146666329661268825691230294798976318"),
                    parse_bigint(b"16580663920817053843121063692728699890952505074386761779275436996241901223840"),
                    parse_bigint(b"14638514680222429058240285918830106208025229459346033470787111294847121792366"),
                ],
                vec![
                    parse_bigint(b"17080385857812672649489217965285727739557573467014392822992021264701563205891"),
                    parse_bigint(b"26176268111736737558502775993925696791974738793095023824029827577569530708665"),
                    parse_bigint(b"4382756253392449071896813428140986330161215829425086284611219278674857536001"),
                ],
                vec![
                    parse_bigint(b"13934033814940585315406666445960471293638427404971553891617533231178815348902"),
                    parse_bigint(b"27054912732979753314774418228399230433963143177662848084045249524271046173121"),
                    parse_bigint(b"28916070403698593376490976676534962592542013020010643734621202484860041243391"),
                ],
                vec![
                    parse_bigint(b"24820015636966360150164458094894587765384135259446295278101998130934963922381"),
                    parse_bigint(b"7969535238488580655870884015145760954416088335296905520306227531221721881868"),
                    parse_bigint(b"7690547696740080985104189563436871930607055124031711216224219523236060212249"),
                ],
                vec![
                    parse_bigint(b"9712576468091272384496248353414290908377825697488757134833205246106605867289"),
                    parse_bigint(b"12148698031438398980683630141370402088785182722473169207262735228500190477924"),
                    parse_bigint(b"14359657643133476969781351728574842164124292705609900285041476162075031948227"),
                ],
                vec![
                    parse_bigint(b"23563839965372067275137992801035780013422228997724286060975035719045352435470"),
                    parse_bigint(b"4184634822776323233231956802962638484057536837393405750680645555481330909086"),
                    parse_bigint(b"16249511905185772125762038789038193114431085603985079639889795722501216492487"),
                ],
                vec![
                    parse_bigint(b"11001863048692031559800673473526311616702863826063550559568315794438941516621"),
                    parse_bigint(b"4702354107983530219070178410740869035350641284373933887080161024348425080464"),
                    parse_bigint(b"23751680507533064238793742311430343910720206725883441625894258483004979501613"),
                ],
                vec![
                    parse_bigint(b"28670526516158451470169873496541739545860177757793329093045522432279094518766"),
                    parse_bigint(b"3568312993091537758218792253361873752799472566055209125947589819564395417072"),
                    parse_bigint(b"1819755756343439646550062754332039103654718693246396323207323333948654200950"),
                ],
                vec![
                    parse_bigint(b"5372129954699791301953948907349887257752247843844511069896766784624930478273"),
                    parse_bigint(b"17512156688034945920605615850550150476471921176481039715733979181538491476080"),
                    parse_bigint(b"25777105342317622165159064911913148785971147228777677435200128966844208883059"),
                ],
                vec![
                    parse_bigint(b"25350392006158741749134238306326265756085455157012701586003300872637887157982"),
                    parse_bigint(b"20096724945283767296886159120145376967480397366990493578897615204296873954844"),
                    parse_bigint(b"8063283381910110762785892100479219642751540456251198202214433355775540036851"),
                ],
                vec![
                    parse_bigint(b"4393613870462297385565277757207010824900723217720226130342463666351557475823"),
                    parse_bigint(b"9874972555132910032057499689351411450892722671352476280351715757363137891038"),
                    parse_bigint(b"23590926474329902351439438151596866311245682682435235170001347511997242904868"),
                ],
                vec![
                    parse_bigint(b"17723373371137275859467518615551278584842947963894791032296774955869958211070"),
                    parse_bigint(b"2350345015303336966039836492267992193191479606566494799781846958620636621159"),
                    parse_bigint(b"27755207882790211140683010581856487965587066971982625511152297537534623405016"),
                ],
                vec![
                    parse_bigint(b"6584607987789185408123601849106260907671314994378225066806060862710814193906"),
                    parse_bigint(b"609759108847171587253578490536519506369136135254150754300671591987320319770"),
                    parse_bigint(b"28435187585965602110074342250910608316032945187476441868666714022529803033083"),
                ],
                vec![
                    parse_bigint(b"16016664911651770663938916450245705908287192964254704641717751103464322455303"),
                    parse_bigint(b"17551273293154696089066968171579395800922204266630874071186322718903959339163"),
                    parse_bigint(b"20414195497994754529479032467015716938594722029047207834858832838081413050198"),
                ],
                vec![
                    parse_bigint(b"19773307918850685463180290966774465805537520595602496529624568184993487593855"),
                    parse_bigint(b"24598603838812162820757838364185126333280131847747737533989799467867231166980"),
                    parse_bigint(b"11040972566103463398651864390163813377135738019556270484707889323659789290225"),
                ],
                vec![
                    parse_bigint(b"5189242080957784038860188184443287562488963023922086723850863987437818393811"),
                    parse_bigint(b"1435203288979376557721239239445613396009633263160237764653161500252258220144"),
                    parse_bigint(b"13066591163578079667911016543985168493088721636164837520689376346534152547210"),
                ],
                vec![
                    parse_bigint(b"17345901407013599418148210465150865782628422047458024807490502489711252831342"),
                    parse_bigint(b"22139633362249671900128029132387275539363684188353969065288495002671733200348"),
                    parse_bigint(b"1061056418502836172283188490483332922126033656372467737207927075184389487061"),
                ],
                vec![
                    parse_bigint(b"10241738906190857416046229928455551829189196941239601756375665129874835232299"),
                    parse_bigint(b"27808033332417845112292408673209999320983657696373938259351951416571545364415"),
                    parse_bigint(b"18820154989873674261497645724903918046694142479240549687085662625471577737140"),
                ],
                vec![
                    parse_bigint(b"7983688435214640842673294735439196010654951226956101271763849527529940619307"),
                    parse_bigint(b"17067928657801807648925755556866676899145460770352731818062909643149568271566"),
                    parse_bigint(b"24472070825156236829515738091791182856425635433388202153358580534810244942762"),
                ],
                vec![
                    parse_bigint(b"25752201169361795911258625731016717414310986450004737514595241038036936283227"),
                    parse_bigint(b"26041505376284666160132119888949817249574689146924196064963008712979256107535"),
                    parse_bigint(b"23977050489096115210391718599021827780049209314283111721864956071820102846008"),
                ],
                vec![
                    parse_bigint(b"26678257097278788410676026718736087312816016749016738933942134600725962413805"),
                    parse_bigint(b"10480026985951498884090911619636977502506079971893083605102044931823547311729"),
                    parse_bigint(b"21126631300593007055117122830961273871167754554670317425822083333557535463396"),
                ],
                vec![
                    parse_bigint(b"1564862894215434177641156287699106659379648851457681469848362532131406827573"),
                    parse_bigint(b"13247162472821152334486419054854847522301612781818744556576865965657773174584"),
                    parse_bigint(b"8673615954922496961704442777870253767001276027366984739283715623634850885984"),
                ],
                vec![
                    parse_bigint(b"2794525076937490807476666942602262298677291735723129868457629508555429470085"),
                    parse_bigint(b"4656175953888995612264371467596648522808911819700660048695373348629527757049"),
                    parse_bigint(b"23221574237857660318443567292601561932489621919104226163978909845174616477329"),
                ],
                vec![
                    parse_bigint(b"1878392460078272317716114458784636517603142716091316893054365153068227117145"),
                    parse_bigint(b"2370412714505757731457251173604396662292063533194555369091306667486647634097"),
                    parse_bigint(b"17409784861870189930766639925394191888667317762328427589153989811980152373276"),
                ],
                vec![
                    parse_bigint(b"25869136641898166514111941708608048269584233242773814014385564101168774293194"),
                    parse_bigint(b"11361209360311194794795494027949518465383235799633128250259863567683341091323"),
                    parse_bigint(b"14913258820718821235077379851098720071902170702113538811112331615559409988569"),
                ],
                vec![
                    parse_bigint(b"12957012022018304419868287033513141736995211906682903915897515954290678373899"),
                    parse_bigint(b"17128889547450684566010972445328859295804027707361763477802050112063630550300"),
                    parse_bigint(b"23329219085372232771288306767242735245018143857623151155581182779769305489903"),
                ],
                vec![
                    parse_bigint(b"1607741027962933685476527275858938699728586794398382348454736018784568853937"),
                    parse_bigint(b"2611953825405141009309433982109911976923326848135736099261873796908057448476"),
                    parse_bigint(b"7372230383134982628913227482618052530364724821976589156840317933676130378411"),
                ],
                vec![
                    parse_bigint(b"20203606758501212620842735123770014952499754751430660463060696990317556818571"),
                    parse_bigint(b"4678361398979174017885631008335559529633853759463947250620930343087749944307"),
                    parse_bigint(b"27176462634198471376002287271754121925750749676999036165457559387195124025594"),
                ],
                vec![
                    parse_bigint(b"6361981813552614697928697527332318530502852015189048838072565811230204474643"),
                    parse_bigint(b"13815234633287489023151647353581705241145927054858922281829444557905946323248"),
                    parse_bigint(b"10888828634279127981352133512429657747610298502219125571406085952954136470354"),
                ],
            ],
            full_rounds: 55,
            has_initial_round_constant: false,
            state_size: 3,
            rate: 2,
            power: 7,
        }
    }
}

pub struct FiniteField;

impl FiniteField {
    pub fn mod_p(x: &BigInt, p: &BigInt) -> BigInt {
        let mut result = x % p;
        if result < BigInt::from(0) {
            result += p;
        }
        result
    }

    pub fn power(a: &BigInt, n: &BigInt, p: &BigInt) -> BigInt {
        let mut a = Self::mod_p(a, p);
        let mut x = BigInt::from(1);
        let mut n = n.clone();

        while n > BigInt::from(0) {
            if &n & BigInt::from(1) == BigInt::from(1) {
                x = Self::mod_p(&(&x * &a), p);
            }
            a = Self::mod_p(&(&a * &a), p);
            n >>= 1;
        }
        x
    }

    pub fn dot(x: &[BigInt], y: &[BigInt], p: &BigInt) -> BigInt {
        let mut z = BigInt::from(0);
        let n = x.len();
        for i in 0..n {
            z += &x[i] * &y[i];
        }
        Self::mod_p(&z, p)
    }

    pub fn add(x: &BigInt, y: &BigInt, p: &BigInt) -> BigInt {
        Self::mod_p(&(x + y), p)
    }

    pub fn mul(x: &BigInt, y: &BigInt, p: &BigInt) -> BigInt {
        Self::mod_p(&(x * y), p)
    }
}

pub struct PoseidonHash;

impl PoseidonHash {
    // Prime field modulus for Mina
    pub fn p() -> BigInt {
        //  parse_bigint_radix("40000000000000000000000000000000224698fc094cf91b992d30ed00000001", 16).unwrap()
        parse_bigint(
            b"28948022309329048855892746252171976963363056481941560715954676764349967630337",
        )
    }

    /// Main hash function - equivalent to the C# Hash method
    pub fn hash(input: Vec<BigInt>) -> BigInt {
        let initial_state = vec![BigInt::from(0), BigInt::from(0), BigInt::from(0)];
        let config = PoseidonConstant::poseidon_config_kimchi_fp();
        Self::poseidon_update(initial_state, input, &config)[0].clone()
        //BigInt::from(0)
    }

    pub fn poseidon_update(
        mut state: Vec<BigInt>,
        input: Vec<BigInt>,
        config: &PoseidonConfig,
    ) -> Vec<BigInt> {
        if input.is_empty() {
            Self::permutation(&mut state, config);
            return state;
        }

        // Pad input with zeros so its length is a multiple of the rate
        let n = ((input.len() as f64 / config.rate as f64).ceil() as usize) * config.rate;
        let mut array = vec![BigInt::from(0); n];

        // Copy input to array
        for (i, val) in input.iter().enumerate() {
            array[i] = val.clone();
        }

        let p = Self::p();

        // For every block of length `rate`, add block to the first `rate` elements of the state, and apply the permutation
        for block_index in (0..n).step_by(config.rate) {
            for i in 0..config.rate {
                state[i] = FiniteField::add(&state[i], &array[block_index + i], &p);
            }
            Self::permutation(&mut state, config);
        }

        state
    }

    pub fn permutation(state: &mut Vec<BigInt>, config: &PoseidonConfig) {
        let p = Self::p();

        // Special case: initial round constant
        let mut offset = 0;
        if config.has_initial_round_constant {
            for i in 0..config.state_size {
                state[i] = FiniteField::add(&state[i], &config.round_constants[0][i], &p);
            }
            offset = 1;
        }

        for round in 0..config.full_rounds {
            // Raise to a power
            for i in 0..config.state_size {
                state[i] = FiniteField::power(&state[i], &BigInt::from(config.power), &p);
            }

            let old_state = state.clone();
            for i in 0..config.state_size {
                // Multiply by MDS matrix
                state[i] = FiniteField::dot(&config.mds[i], &old_state, &p);
                // Add round constants
                state[i] =
                    FiniteField::add(&state[i], &config.round_constants[round + offset][i], &p);
            }
        }
    }
}

pub fn poseidon(input: Vec<BigInt>) -> BigInt {
    PoseidonHash::hash(input)
}

#[cfg(test)]
mod tests {
    use super::*;
    use crypto_bigint::{Encoding, U256};

    #[test]
    fn test_poseidon_hash_123() {
        let input = vec![BigInt::from(1), BigInt::from(2), BigInt::from(3)];
        let result = poseidon(input);
        println!("Poseidon hash for [1, 2, 3]: {:?}", result);
        // Add assertion once expected hash is known
        assert_eq!(
            result,
            parse_bigint(
                b"24619730558757750532171846435738270973938732743182802489305079455910969360336",
            ),
        );
    }

    #[test]
    fn test_crypto_bigint_arithmetic() {
        // Create U256 values for 2 and 3
        let two = U256::from(2u64);
        let three = U256::from(3u64);

        // Calculate 2 + 3
        let sum = two.wrapping_add(&three);
        println!("2 + 3 = {:?}", sum);

        // Assert that 2 + 3 = 5
        assert_eq!(sum, U256::from(5u64));
        assert_eq!(sum.to_be_bytes()[31], 5u8); // Check the least significant byte

        // Calculate 2 * 3
        let product = two.wrapping_mul(&three);
        println!("2 * 3 = {:?}", product);

        // Assert that 2 * 3 = 6
        assert_eq!(product, U256::from(6u64));
        assert_eq!(product.to_be_bytes()[31], 6u8); // Check the least significant byte

        // Additional assertions to verify the values
        assert!(sum > two);
        assert!(sum > three);
        assert!(product > sum);
        assert_eq!(product, three.wrapping_add(&three)); // 2 * 3 = 3 + 3
    }
}
