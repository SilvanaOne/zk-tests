// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client/index.js';
import type { AddNumbersData, AddNumbersResponses, AddNumbersErrors, MultiplyNumbersData, MultiplyNumbersResponses, MultiplyNumbersErrors, GenerateSuiKeypairData, GenerateSuiKeypairResponses, GenerateSuiKeypairErrors, CreateRegistryData, CreateRegistryResponses, CreateRegistryErrors, AddDeveloperData, AddDeveloperResponses, AddDeveloperErrors, UpdateDeveloperData, UpdateDeveloperResponses, UpdateDeveloperErrors, RemoveDeveloperData, RemoveDeveloperResponses, RemoveDeveloperErrors, AddAgentData, AddAgentResponses, AddAgentErrors, UpdateAgentData, UpdateAgentResponses, UpdateAgentErrors, RemoveAgentData, RemoveAgentResponses, RemoveAgentErrors, AddAppData, AddAppResponses, AddAppErrors, UpdateAppData, UpdateAppResponses, UpdateAppErrors, RemoveAppData, RemoveAppResponses, RemoveAppErrors } from './types.gen.js';
import { client as _heyApiClient } from './client.gen.js';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Add two numbers
 * Calculates the sum of two unsigned 64-bit integers
 */
export const addNumbers = <ThrowOnError extends boolean = false>(options: Options<AddNumbersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddNumbersResponses, AddNumbersErrors, ThrowOnError>({
        url: '/add',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Multiply two numbers
 * Calculates the product of two unsigned 64-bit integers
 */
export const multiplyNumbers = <ThrowOnError extends boolean = false>(options: Options<MultiplyNumbersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MultiplyNumbersResponses, MultiplyNumbersErrors, ThrowOnError>({
        url: '/multiply',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate or retrieve a Sui keypair
 * Generates a new Ed25519 keypair for the given login identifier or retrieves existing one
 */
export const generateSuiKeypair = <ThrowOnError extends boolean = false>(options: Options<GenerateSuiKeypairData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GenerateSuiKeypairResponses, GenerateSuiKeypairErrors, ThrowOnError>({
        url: '/generate-sui-keypair',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a Silvana registry on Sui blockchain
 * Creates a new Silvana registry with the specified name on the chosen Sui network
 */
export const createRegistry = <ThrowOnError extends boolean = false>(options: Options<CreateRegistryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRegistryResponses, CreateRegistryErrors, ThrowOnError>({
        url: '/create-registry',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add a developer to the registry
 */
export const addDeveloper = <ThrowOnError extends boolean = false>(options: Options<AddDeveloperData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddDeveloperResponses, AddDeveloperErrors, ThrowOnError>({
        url: '/add-developer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update a developer in the registry
 */
export const updateDeveloper = <ThrowOnError extends boolean = false>(options: Options<UpdateDeveloperData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateDeveloperResponses, UpdateDeveloperErrors, ThrowOnError>({
        url: '/update-developer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove a developer from the registry
 */
export const removeDeveloper = <ThrowOnError extends boolean = false>(options: Options<RemoveDeveloperData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoveDeveloperResponses, RemoveDeveloperErrors, ThrowOnError>({
        url: '/remove-developer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add an agent to the registry
 */
export const addAgent = <ThrowOnError extends boolean = false>(options: Options<AddAgentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddAgentResponses, AddAgentErrors, ThrowOnError>({
        url: '/add-agent',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update an agent in the registry
 */
export const updateAgent = <ThrowOnError extends boolean = false>(options: Options<UpdateAgentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateAgentResponses, UpdateAgentErrors, ThrowOnError>({
        url: '/update-agent',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove an agent from the registry
 */
export const removeAgent = <ThrowOnError extends boolean = false>(options: Options<RemoveAgentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoveAgentResponses, RemoveAgentErrors, ThrowOnError>({
        url: '/remove-agent',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Add an app to the registry
 */
export const addApp = <ThrowOnError extends boolean = false>(options: Options<AddAppData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddAppResponses, AddAppErrors, ThrowOnError>({
        url: '/add-app',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update an app in the registry
 */
export const updateApp = <ThrowOnError extends boolean = false>(options: Options<UpdateAppData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateAppResponses, UpdateAppErrors, ThrowOnError>({
        url: '/update-app',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Remove an app from the registry
 */
export const removeApp = <ThrowOnError extends boolean = false>(options: Options<RemoveAppData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoveAppResponses, RemoveAppErrors, ThrowOnError>({
        url: '/remove-app',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};