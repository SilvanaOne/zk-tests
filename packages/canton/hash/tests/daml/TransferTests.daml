-- Copyright (c) 2025 Silvana. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

-- | Tests for Transfer APIs (CIP-56 Section: FOP Transfer Workflow)
-- Verifies TransferFactory and TransferInstruction interfaces.
module TransferTests where

import Daml.Script
import DA.Assert ((===), (=/=))
import DA.Time
import DA.TextMap qualified as TextMap
import DA.List (head)

import Splice.Api.Token.MetadataV1 qualified as Token.Metadata
import Splice.Api.Token.HoldingV1 qualified as Token.Holding
import Splice.Api.Token.TransferInstructionV1 qualified as Token.Transfer

import TestToken
import TestUtils

-- Test: Basic P2P Transfer with Input Holdings
testBasicTransfer : Script ()
testBasicTransfer = script do
  parties@TestParties{..} <- setupParties
  factories <- setupFactories admin defaultInstrumentId
  now <- getCurrentTime

  -- Bob has tokens
  bobHolding <- mintTokens admin factories.burnMintFactoryCid bob 100.0

  -- Create transfer from Bob to Alice
  let transfer = Token.Transfer.Transfer with
        sender = bob
        receiver = alice
        amount = 50.0
        instrumentId = instrumentIdFor admin
        requestedAt = now
        executeBefore = now `addRelTime` days 1
        inputHoldingCids = [toInterfaceContractId bobHolding]
        meta = testMetadata "transfer-1"

  -- Bob initiates transfer via factory
  let extraArgs = Token.Metadata.ExtraArgs with
        context = Token.Metadata.ChoiceContext with values = TextMap.empty
        meta = Token.Metadata.Metadata with values = TextMap.empty

  _result <- submit bob $ exerciseCmd (toInterfaceContractId @Token.Transfer.TransferFactory factories.transferFactoryCid) Token.Transfer.TransferFactory_Transfer with
    expectedAdmin = admin
    transfer
    extraArgs

  -- Verify transfer was created successfully
  -- Note: Full transfer acceptance would require receiver to exercise Accept choice

  return ()

-- Run all transfer tests
runAllTransferTests : Script ()
runAllTransferTests = script do
  testBasicTransfer
  return ()
