# Copyright (c), Mysten Labs, Inc.
# SPDX-License-Identifier: Apache-2.0

ARG   STAGEX_REG=quay.io/stagex              # default registry for StageX images (anonymous pulls work)

# This containerfile uses StageX (https://stagex.tools) images, which provide a
# full source bootstrapped, deterministic, and hermetic build toolchain

FROM ${STAGEX_REG}/core-binutils:sx2025.05.0 AS core-binutils
FROM ${STAGEX_REG}/core-ca-certificates:sx2025.05.0 AS core-ca-certificates
FROM ${STAGEX_REG}/core-gcc:sx2025.05.0 AS core-gcc
FROM ${STAGEX_REG}/core-git:sx2025.05.0 AS core-git
FROM ${STAGEX_REG}/core-zlib:sx2025.05.0 AS core-zlib
FROM ${STAGEX_REG}/core-llvm:sx2025.05.0 AS core-llvm
FROM ${STAGEX_REG}/core-openssl:sx2025.05.0 AS core-openssl
FROM ${STAGEX_REG}/core-rust:sx2025.05.0 AS core-rust
FROM ${STAGEX_REG}/core-musl:sx2025.05.0 AS core-musl
FROM ${STAGEX_REG}/core-libunwind:sx2025.05.0 AS core-libunwind
FROM ${STAGEX_REG}/core-pkgconf:sx2025.05.0 AS core-pkgconf
FROM ${STAGEX_REG}/core-busybox:sx2025.05.0 AS core-busybox
# FROM ${STAGEX_REG}/core-python:local@sha256:17d634028c3ed31707aa492dc65dc15ac27bab197d08e447786b3b1e8c26df2c AS core-python
FROM ${STAGEX_REG}/core-libzstd:sx2025.05.0 AS core-libzstd
FROM ${STAGEX_REG}/user-eif_build:sx2025.05.0 AS user-eif_build
FROM ${STAGEX_REG}/user-gen_initramfs:sx2025.05.0 AS user-gen_initramfs
FROM ${STAGEX_REG}/user-linux-nitro:sx2025.05.0 AS user-linux-nitro
FROM ${STAGEX_REG}/user-cpio:sx2025.05.0 AS user-cpio
FROM ${STAGEX_REG}/user-socat:local@sha256:acef3dacc5b805d0eaaae0c2d13f567bf168620aea98c8d3e60ea5fd4e8c3108 AS user-socat
FROM ${STAGEX_REG}/user-jq:sx2025.05.0 AS user-jq
FROM ${STAGEX_REG}/user-libseccomp:sx2025.05.0 AS user-libseccomp
FROM ${STAGEX_REG}/core-clang:sx2025.05.0 AS core-clang
FROM ${STAGEX_REG}/core-libffi:sx2025.05.0 AS core-libffi

FROM scratch as base
ENV TARGET=aarch64-unknown-linux-musl
ENV RUSTFLAGS="-C target-feature=+crt-static"
ENV CARGOFLAGS="--locked --no-default-features --release --target ${TARGET}"
ENV OPENSSL_STATIC=true

COPY --from=core-busybox . /
COPY --from=core-musl . /
COPY --from=core-libunwind . /
COPY --from=core-openssl . /
COPY --from=core-zlib . /
COPY --from=core-ca-certificates . /
COPY --from=core-libzstd . /
COPY --from=core-binutils . /
COPY --from=core-pkgconf . /
COPY --from=core-git . /
COPY --from=core-rust . /
COPY --from=user-gen_initramfs . /
COPY --from=user-eif_build . /
COPY --from=core-llvm . /
COPY --from=core-gcc . /
COPY --from=core-clang . /
COPY --from=core-libffi . /
COPY --from=user-cpio . /
COPY --from=user-libseccomp . /
COPY --from=user-linux-nitro /bzImage .
COPY --from=user-linux-nitro /linux.config .



FROM base as build
COPY . .
RUN cargo build --workspace --locked --no-default-features --release --target ${TARGET}

WORKDIR /src/forwarder
# ENV RUSTFLAGS="-C target-feature=+crt-static -C relocation-model=static"
ENV LIBCLANG_PATH=/usr/lib
RUN cargo build --locked --no-default-features --release --target ${TARGET}

WORKDIR /src/server
# ENV RUSTFLAGS="-C target-feature=+crt-static -C relocation-model=static"
ENV LIBCLANG_PATH=/usr/lib
RUN cargo build --locked --no-default-features --release --target ${TARGET}


WORKDIR /build_cpio
ENV KBUILD_BUILD_TIMESTAMP=1

RUN mkdir initramfs/
COPY --from=core-busybox . initramfs
# COPY --from=core-python . initramfs
COPY --from=core-musl . initramfs
COPY --from=user-libseccomp . initramfs
COPY --from=core-ca-certificates /etc/ssl/certs initramfs
COPY --from=core-busybox /bin/sh initramfs/sh
COPY --from=user-jq /bin/jq initramfs
COPY --from=user-socat /bin/socat . initramfs
RUN mkdir initramfs/proc
RUN mkdir initramfs/run

RUN cp /target/${TARGET}/release/init initramfs
RUN cp /src/server/target/${TARGET}/release/server initramfs
RUN cp /src/forwarder/target/${TARGET}/release/forwarder initramfs
# RUN cp /src/server/traffic_forwarder.py initramfs/
RUN cp /src/server/run.sh initramfs/
RUN cp /src/server/allowed_endpoints.yaml initramfs/

RUN <<-EOF
    set -eux
    cd initramfs
    find . -exec touch -hcd "@0" "{}" +
    find . -print0 \
    | sort -z \
    | cpio \
        --null \
        --create \
        --verbose \
        --reproducible \
        --format=newc \
    | gzip --best \
    > /build_cpio/rootfs.cpio
EOF

WORKDIR /build_eif
RUN eif_build \
	--kernel /bzImage \
	--kernel_config /linux.config \
	--ramdisk /build_cpio/rootfs.cpio \
	--pcrs_output /nitro.pcrs \
	--output /nitro.eif \
	--cmdline 'reboot=k initrd=0x2000000,3228672 root=/dev/ram0 panic=1 pci=off nomodules console=ttyS0 i8042.noaux i8042.nomux i8042.nopnp i8042.dumbkbd'

FROM base as install
WORKDIR /rootfs
COPY --from=build /nitro.eif .
COPY --from=build /nitro.pcrs .
COPY --from=build /build_cpio/rootfs.cpio .

FROM scratch as package
COPY --from=install /rootfs .
