### Stage 1 – Build ########################################################
# Use the official Rust Alpine image for the arm64 architecture as the
# builder stage. This already contains a musl-based toolchain which lets us
# build statically-linked binaries that are ideal for Nitro Enclaves.
# 1.87-alpine
FROM --platform=linux/arm64 docker.io/library/rust@sha256:fa3f412044d347294ad9c21eb3c9922a5e12e57b645ae53bbd27b8bc26173a7e AS builder

# Install build dependencies
ENV SOURCE_DATE_EPOCH=0  
RUN apk add --no-cache build-base musl-dev

# Workdir inside the container
WORKDIR /app

# Pre-add the musl target (the default on Alpine, but be explicit)
RUN rustup target add aarch64-unknown-linux-musl

# Copy the Rust sources into the build context.
# We copy the Cargo.toml/Cargo.lock first so that dependency layers are
# cached when only application code changes.
RUN mkdir -p server
RUN mkdir -p forwarder
COPY server/Cargo.toml server/Cargo.lock ./server
COPY server/src ./server/src
COPY forwarder/Cargo.toml forwarder/Cargo.lock ./forwarder
COPY forwarder/src ./forwarder/src

ENV TARGET=aarch64-unknown-linux-musl
ENV RUSTFLAGS="-C target-feature=+crt-static -C link-arg=-Wl,--build-id=none"
ENV CARGO_INCREMENTAL=0
ENV CARGOFLAGS="--locked --no-default-features --release --target ${TARGET}"
# Build in release mode for arm64 musl target
RUN cd server && cargo build --release --target aarch64-unknown-linux-musl
RUN cd forwarder && cargo build --release --target aarch64-unknown-linux-musl


### Stage 2 – Runtime ######################################################
# Use a minimal Alpine image for the final enclave rootfs.
# alpine:3.22
FROM --platform=linux/arm64 docker.io/library/alpine@sha256:008448246686fe28544e36ba89e7bc7fbe6dad8a2ccdef576875c74298c46348 AS runtime

# Install runtime dependencies (socat for vsock forwarding, jq for JSON parsing)
RUN apk add --no-cache socat jq

# Create a non-root user (optional but recommended)
RUN addgroup -S app && adduser -S app -G app

# Application directory
WORKDIR /app

# Copy the statically-linked executable from the builder stage
COPY --from=builder /app/server/target/aarch64-unknown-linux-musl/release/server /app/server
COPY --from=builder /app/forwarder/target/aarch64-unknown-linux-musl/release/forwarder /app/forwarder
COPY data/allowed_endpoints.yaml /app/allowed_endpoints.yaml
COPY data/run.sh /app/run.sh

# Ensure the binary is executable and owned by the non-root user
RUN chmod +x /app/server && chown app:app /app/server
RUN chmod +x /app/forwarder && chown app:app /app/forwarder
RUN chmod +x /app/run.sh && chown app:app /app/run.sh
RUN find /app -exec touch -hcd '@0' {} +
USER app

# The Nitro Enclave entrypoint is simply the application binary
ENTRYPOINT ["/app/run.sh"] 